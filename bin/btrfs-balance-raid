#!/usr/bin/env bash
set -o pipefail  # exit if pipe command fails
[ -z "$DEBUG" ] || set -x
export LC_ALL=C

PROGRAM=${PROGRAM:-$(basename "${BASH_SOURCE[0]}")}
LOCK_FILE="/var/run/${PROGRAM}.lock"
LOCK_TIMEOUT=300


usage() {
    cat <<EOF
Usage:
    $PROGRAM [-h] <label> <mountpoint>

This program tries to rebalance the Btrfs the data. It is assuming the device
is already formated for the RAID 1 group and for some reason it got unbalanced, e.g.
temp disconnection.

(c) Jose Riguera, 2020 <jriguera@gmail.com>
EOF
}



balance_btrfs() {
    local root="${1}"
    local label="${2}"

    echo "* Performing Btrfs (re)balancing on ${root} ..."
    (
        set -ex
        sync
        btrfs balance start --full-balance "${root}"
    ) &
    wait $!
    rvalue=$?
    if [ ${rvalue} -ne 0 ]
    then
        echo "* ERROR, Btrfs balance not successful!"
        return 1
    fi
    # Clean stats
    echo "* Reseting device stats on ${root} ..."
    btrfs device stats -z "${root}"
    return ${rvalue}
}


fix_btrfs() {
    local label="${1}"
    local mountpoint="${2}"

    local devices=()

    # Scan all devices
    btrfs device scan | awk '{ print "* "$0}'
    echo "* Device information with label '${label}'"
    blkid -n btrfs -t LABEL="${label}"
    echo "* Btrfs device stats for '${mountpoint}'"
    btrfs device stats "${mountpoint}"
    echo "* Filesystem usage of '${mountpoint}'"
    btrfs filesystem usage "${mountpoint}"

    devices=($(blkid -n btrfs -o device -t LABEL="${label}"))
    if [[ ${#devices[@]} -lt 2 ]]
    then
        echo "* WARN, at least 2 devices are needed for RAID1! skipping balance."
        return 0
    else
        balance_btrfs "${mountpoint}" "${label}"
        return $?
    fi
}


# Lock to avoid running multiple instances
singleton() {
    if ! exec 222<>"${LOCK_FILE}"
    then
        echo "* Error, cannot create/read lock file: ${LOCK_FILE}"
        return 1
    fi
    # wait to get the lock
    echo -n "* Taking lock (${LOCK_FILE}): "
    while ! flock -n -x 222 && [[ ${LOCK_TIMEOUT} -gt 0 ]]
    do
        sleep 1
        LOCK_TIMEOUT=$((LOCK_TIMEOUT - 1))
        echo -n "."
    done
    if [[ ${LOCK_TIMEOUT} -lt 1 ]]
    then
        echo "error, pid=$(<${LOCK_FILE}) still running"
        return 1
    else
        echo "ok"
        echo $$ > "${LOCK_FILE}"
        trap "rm -f ${LOCK_FILE}; echo DELETED" EXIT
        return 0
    fi
}


system_check() {
    if ! [ -x "$(command -v btrfs)" ]
    then
        echo "Error, btrfs utilities not installed!"
        return 1
    fi
    if [ "$(id -u)" -ne "0" ]
    then
        echo "Error, program not running as root!"
        return 1
    fi
    return 0
}


# Program
if [ "$0" == "${BASH_SOURCE[0]}" ]
then
    POSITIONAL=()
    while [[ $# -gt 0 ]]
    do
        key="${1}"
        case ${key} in
            -h|--help)
                usage
                exit 0
            ;;
            *)
                POSITIONAL+=("$1")  # save it in an array for later
                shift               # past argument
            ;;
        esac
    done
    system_check || exit 1
    if [ "${#POSITIONAL[@]}" -ne "2" ]
    then
        echo "Not enough parameters!. See usage."
        exit 1
    else
        trap "echo 'Be patient, $@ is still running!'" SIGINT SIGTERM SIGKILL
        singleton && fix_btrfs "${POSITIONAL[0]}" "${POSITIONAL[1]}"
        exit $?
    fi
fi

